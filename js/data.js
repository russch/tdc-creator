var customizations =
      [
     {customizationName: "CAP_CREATE_TEMP_TABLES", description: "Set to 'yes' if Tableau can create temporary tables needed for certain complex or optimized queries. See also: CAP_SELECT_INTO.", customizationValue: "yes"},
       {customizationName: "CAP_CONNECT_STORED_PROCEDURE", description: "Set to 'yes' to allow support for connecting to a stored procedure. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
     {customizationName: "CAP_FAST_METADATA", description: "Set to 'yes' if you have small to moderate size schemas. This capability controls whether Tableau should enumerate all of the objects immediately when you connect. Set the value to “yes” to enable this capability for better performance when creating new connections to your Oracle data. Disable this capability to allow search for specific schemas or tables instead of retrieving all objects. You can search for all objects by using an empty string. This capability is available in 9.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ISOLATION_LEVEL_READ_COMMITTED", description: "Set to 'yes' to force the transaction isolation level to Read Committed if the data source supports it. Only one of the four transaction isolation levels should be set to 'yes'. This capability is available in Tableau 8.0 and later. See also: CAP_SET_ISOLATION_LEVEL_VIA_SQL, CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API.", customizationValue: "yes"},
       {customizationName: "CAP_ISOLATION_LEVEL_READ_UNCOMMITTED", description: "Set to 'yes' to force the transaction isolation level to Read Uncommitted if the data source supports it. Only one of the four transaction isolation levels should be set to 'yes'. This capability can improve speed by reducing lock contention, but may result in partial or inconsistent data in query results. This capability is available in Tableau 8.0. See also: CAP_SET_ISOLATION_LEVEL_VIA_SQL, CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API.", customizationValue: "yes"},
       {customizationName: "CAP_ISOLATION_LEVEL_REPEATABLE_READS", description: "Set to 'yes' to force the transaction isolation level to Repeatable Reads if the data source supports it. Only one of the four transaction isolation levels should be set to 'yes'. This capability is available in Tableau 8.0. See also: CAP_SET_ISOLATION_LEVEL_VIA_SQL, CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API.", customizationValue: "yes"},
       {customizationName: "CAP_ISOLATION_LEVEL_SERIALIZABLE", description: "Set to 'yes' to force the transaction isolation level to Serializable if the data source supports it. Only one of the four transaction isolation levels should be set to 'yes'. This is a very conservative setting that may improve stability at the expense of performance. This capability is available in Tableau 8.0. See also: CAP_SET_ISOLATION_LEVEL_VIA_SQL, CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API.", customizationValue: "yes"},
       {customizationName: "CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API", description: "Set to 'yes' to force Tableau to set the transaction isolation level for the data source using the ODBC API. CAP_SET_ISOLATION_LEVEL_VIA_ODBC_API must be set to 'yes' when any one of the four CAP_ISOLATION_LEVEL capabilities has been set to 'yes' . This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_SET_ISOLATION_LEVEL_VIA_SQL", description: "Set to 'yes' to force Tableau to set the transaction isolation level for the data source using a SQL query. CAP_SET_ISOLATION_LEVEL_VIA_SQL must be set to 'yes' when any one of the four CAP_ISOLATION_LEVEL capabilities has been set to 'yes' . This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_MULTIPLE_CONNECTIONS_FROM_SAME_IP", description: "Set to 'no' to prevent Tableau from creating more than one active connection to the database. This is a conservative setting that may increase stability at the expense of performance. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_DETECT_ALIAS_CASE_FOLDING", description: "Set to 'yes' to allow Tableau to detect and recover from an ODBC data source that reports the field names in a result set using only upper-case or lower-case characters, instead of the expected field names. This capability is available in Tableau 7.0.7 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_BOOL_AS_WCHAR_01LITERAL", description: "Set to 'yes' to bind a boolean data type as a WCHAR containing values '0' or '1.' This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_BOOL_AS_WCHAR_TFLITERAL", description: "Set to 'yes' to bind a boolean data type as WCHAR containing values 't' or 'f.' This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_DATE_AS_CHAR", description: "Set to 'yes' to force the Tableau native ODBC protocol to bind date values as CHAR. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_DATETIME_AS_CHAR", description: "Set to 'yes' to force the Tableau native ODBC protocol to bind datetime values as CHAR. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_MAX_STRING_BUFFERS", description: "Set to 'yes' to force the Tableau native ODBC protocol to use maximum-sized buffers (1MB) for strings instead of the size described by metadata. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_MEDIUM_STRING_BUFFERS", description: "Set to 'yes' to force the Tableau native ODBC protocol to use medium-sized buffers (1K) for strings instead of the size described by metadata. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_SMALL_STRING_BUFFERS", description: "Set to 'yes' to force the Tableau native ODBC protocol to use small buffers for strings instead of the size described by metadata. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_FORCE_SIGNED", description: "Set to 'yes' to force binding integers as signed. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_PRESERVE_BOM", description: "Set to 'yes' to preserve BOM when present in strings. Hive will return BOM and treat strings containing it as distinct entities.This capability is available in Tableau 8.2 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_SUPPRESS_COERCE_TO_STRING", description: "Set to 'yes' to prevent the Tableau native ODBC protocol from binding non-string data as strings (i.e. requesting driver conversion). This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_SUPPRESS_INT64", description: "Set to 'yes' to prevent the Tableau native ODBC protocol from using 64-bit integers for large numeric data. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_SUPPRESS_PREFERRED_CHAR", description: "Set to 'yes' to prevent the Tableau native ODBC protocol from preferring a character type that differs from the driver default. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_SUPPRESS_PREFERRED_TYPES", description: "Set to 'yes' to prevent the Tableau native ODBC protocol from binding any data according to its preferred wire types. With this capability set, Tableau will only bind according to the data types described by the ODBC driver via metadata. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_BIND_SUPPRESS_WIDE_CHAR", description: "Set to 'yes' to prevent the Tableau native ODBC protocol from binding strings a WCHAR. Instead they will be bound as single-byte CHAR arrays, and processed locally for any UTF-8 characters contained within. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CONNECTION_STATE_VERIFY_FAST", description: "Set to ‘yes’ to check if a connection is broken with a fast ODBC API call. This capability is available in Tableau 8.2 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CONNECTION_STATE_VERIFY_PROBE", description: "Set to ‘yes’ to check if a connection is broken with a forced probe. This capability is available in Tableau 8.2 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CONNECTION_STATE_VERIFY_PROBE_IF_STALE", description: "Set to ‘yes’ to check if a connection is broken with a forced probe only if it is 'stale' (i.e., unused for about 30 minutes). This capability is available in Tableau 8.2 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CONNECTION_STATE_VERIFY_PROBE_PREPARED_QUERY", description: "Set to ‘yes’ to check if a connection is broken using a prepared query. This capability is available in Tableau 8.2 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CURSOR_DYNAMIC", description: "Set to 'yes' to force the Tableau native ODhelloBC protocol to set the cursor type for all statements to Dynamic (scrollable, detects added/removed/modified rows). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CURSOR_FORWARD_ONLY", description: "Set to 'yes' to force the Tableau native ODBC protocol to set the cursor type for all statements to Forward-only (non-scrollable). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CURSOR_KEYSET_DRIVEN", description: "Set to 'yes' to force the Tableau native ODBC protocol to set the cursor type for all statements to Keyset-driven (scrollable, detects changes to values within a row). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_CURSOR_STATIC", description: "Set to 'yes' to force Tableau to set the cursor type for all statements to Static (scrollable, does not detect changes). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_ERROR_IGNORE_FALSE_ALARM", description: "Set to 'yes' to allow the Tableau native ODBC protocol to ignore SQL_ERROR conditions where SQLSTATE is '00000' (meaning 'no error'). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_ALLOW_CHAR_UTF8", description: "Set to 'yes' to allow the use of single-byte char data type for binding Unicode strings as UTF-8. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BIND_FORCE_TARGET_METADATA", description: "Set to 'yes' to force binding for export based on all of the metadata from the target table instead of the ODBC metadata for the parameterized insert statement.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BIND_PREFER_TARGET_METADATA", description: "Set to 'yes' to prefer binding for export based on specific types of metadata from the target table instead of the ODBC metadata for the parameterized insert statement.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_RESIZABLE", description: "Set to 'yes' to allow export buffers to be reallocated after the first batch to improve performance.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_SIZE_FIXED", description: "Set to 'yes' to ignore the width of a single row when computing the total rows to insert at a time. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_SIZE_LIMIT_512KB", description: "Set to 'yes' to limit export buffers to 512 KB. This is an uncommon setting. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_SIZE_MASSIVE", description: "Set to 'yes' to force the use of large buffers for insert. If CAP_ODBC_EXPORT_BUFFERS_RESIZABLE is not set or disabled, a fixed row count is used.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_SIZE_MEDIUM", description: "Set to 'yes' to force the use of medium-sized buffers for insert. If CAP_ODBC_EXPORT_BUFFERS_RESIZABLE is not set or disabled, a fixed row count is used.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_BUFFERS_SIZE_SMALL", description: "Set to 'yes' to force the use of small buffers for insert. If CAP_ODBC_EXPORT_BUFFERS_RESIZABLE is not set or disabled, a fixed row count is used.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_CONTINUE_ON_ERROR", description: "Set to 'yes' to continue data insert despite errors. Some data sources report warnings as errors.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_DATA_BULK", description: "Set to 'yes' to allow the use of ODBC bulk operations for data insert. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_DATA_BULK_VIA_INSERT", description: "Set to 'yes' to allow the use of ODBC bulk operations based on 'INSERT INTO' parameterized queries. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_DATA_BULK_VIA_ROWSET", description: "Set to 'yes' to allow the use of ODBC bulk operations based on a rowset cursor. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_FORCE_INDICATE_NTS", description: "Set to 'yes' to force the use of indicator buffers for identifying null-terminated strings (NTS). This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_FORCE_SINGLE_ROW_BINDING", description: "Set to 'yes' to force the use of a single row for binding export buffers to insert data.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_FORCE_SINGLE_ROW_BINDING_WITH_TIMESTAMPS", description: "Set to 'yes' to force the use of a single row for binding export buffers when dealing with timestamp data. This is required for some versions of Teradata.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_FORCE_STRING_WIDTH_FROM_SOURCE", description: "Set to 'yes' to force the use of the source string width (from Tableau metadata), overriding the destination string width (from insert parameter metadata).This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_FORCE_STRING_WIDTH_USING_OCTET_LENGTH", description: "Set to 'yes' to force the use of the source string width from the octet length.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_SUPPRESS_STRING_WIDTH_VALIDATION", description: "Set to 'yes' to suppress validating that the target string width can accommodate the widest source strings.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BATCH_MASSIVE", description: "Set to ‘yes’ to commit in massive batches of INSERT statements (~100,000). This may be useful with single-row export binding. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BATCH_MEDIUM", description: "Set o 'yes' to commit in medium-sized batches of INSERT statements (~50). A single statement may be bound to multiple records.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BATCH_SMALL", description: "Set to 'yes' to commit in small batches of INSERT statements (~5). A single statement may be bound to multiple records.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BYTES_MASSIVE", description: "Set to 'yes' to commit in massive batches of data (~100 MB). This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BYTES_MEDIUM", description: "Set to 'yes' to commit in medium batches of data (~10 MB). This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_BYTES_SMALL", description: "Set to 'yes' to commit in small batches of data (~1 MB). This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_EACH_STATEMENT", description: "Set to 'yes' to commit after executing each INSERT statement. A single statement may be bound to multiple records.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_INTERVAL_LONG", description: "Set to 'yes' to commit in long intervals of elapsed time (~100 seconds). This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_INTERVAL_MEDIUM", description: "Set to 'yes' to commit in medium intervals of elapsed time (~10 seconds )This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_INTERVAL_SHORT", description: "Set to 'yes' to commit in short intervals of elapsed time (~1 seconds)This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSACTIONS_COMMIT_ONCE_WHEN_COMPLETE", description: "Set to 'yes' to commit only once at the end after the export is complete.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_EXPORT_TRANSLATE_DATA_PARALLEL", description: "Set to 'yes' to use parallel loops to translate Tableau DataValues to wire buffers on export. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_ABORT_FORCE_CANCEL_STATEMENT", description: "Set to 'yes' to cancel the statement handle upon interrupting SQLFetch with a cancel exception.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_BUFFERS_RESIZABLE", description: "Set to 'yes' to allow buffers to be reallocated after fetch to improve performance or handle data truncation. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_BUFFERS_SIZE_FIXED", description: "Set to 'yes' to ignore the width of a single row when computing the total rows to fetch. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_BUFFERS_SIZE_MASSIVE", description: "Set to 'yes' to force the use of large buffers. If CAP_ODBC_FETCH_BUFFERS_SIZE_FIXED is enabled, a fixed row count is used. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_BUFFERS_SIZE_MEDIUM", description: "Set to 'yes' to force the use of medium-sized buffers. If CAP_ODBC_FETCH_BUFFERS_SIZE_FIXED is enabled, a fixed row count is used. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_BUFFERS_SIZE_SMALL", description: "Set to 'yes' to force the use of small buffers. If CAP_ODBC_FETCH_BUFFERS_SIZE_FIXED is enabled, a fixed row count is used. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_CONTINUE_ON_ERROR", description: "Set to 'yes' to allow the Tableau native ODBC protocol to continue resultset fetch despite errors (some data sources report warnings as errors). This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_ESTIMATE_ROW_COUNT", description: "Set to 'yes' to allow querying for an estimated or exact row count, which may be used to compute buffer sizes. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_IGNORE_FRACTIONAL_SECONDS", description: "Set to 'yes' to allow the Tableau native ODBC protocol to ignore the fractional seconds component of a time value when fetching query result set data. This is useful when working with data sources that do not follow the ODBC specification for fractional seconds, which must be represented as billionths of a second. This capability is available in Tableau 7.0.8 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_MASSIVE_BUFFERS", description: "Set to 'yes' to force the Tableau native ODBC protocol to use large buffers instead of adapting to the resultset size. This capability is available in Tableau 6.1.4 through Tableau 7.0 only.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FETCH_RESIZE_BUFFERS", description: "Set to 'yes' to allow the Tableau native ODBC protocol to automatically resize buffers and fetch again if data truncation occurred. This capability is available in Tableau 6.1.4 through 7.0 only.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_FORCE_SINGLE_ROW_BINDING", description: "Set to 'yes' to force the Tableau native ODBC protocol to use a single row for result set transfers instead of the more efficient bulk-fetch. This capability is available in Tableau 6.1.4 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_IMPORT_ERASE_BUFFERS", description: "Set to 'yes' to reset the contents of data buffers before fetching each block. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_IMPORT_TRUST_METADATA_CONTAINSNULL", description: "Set to 'yes' to use efficient import if Tableau can trust the result set metadata representing the absence of NULLs. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_FORCE_LENGTH_AS_PRECISION", description: "Set to 'yes' to force the Tableau native ODBC protocol to use the column length as the numeric precision. This is an uncommon setting. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_FORCE_NUM_PREC_RADIX_10", description: "Set to 'yes' to force the Tableau native ODBC protocol to assume the numeric precision is reported in base-10 digits. This is an uncommon setting. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_FORCE_UNKNOWN_AS_STRING", description: "Set to 'yes' to force the Native ODBC Protocol to treat unknown data types as string instead of ignoring the associated column. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_FORCE_UTF8_IDENTIFIERS", description: "Set to 'yes' to force the protocol to treat identifiers as UTF-8 when communicating with the driver. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SKIP_DESC_TYPE_NAME", description: "Set to 'yes' to remove the check for the SQL_DESC_TYPE_NAME attribute with the SQLColAttribute API.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_STRING_LENGTH_UNKNOWN", description: "Set to 'yes' to prevent Tableau from allocating memory based on the driver-reported string length, which may not be known or reported properly. Instead, Tableau will use a fixed-sized string length, and will reallocate as needed to handle string data that is too large for the fixed-size buffer. This capability is available in Tableau 7.0.7.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_STRING_TRUST_OCTET_LENGTH", description: "Set to 'yes' to use the octet length reported by the driver for strings instead of computing it from the number of characters. This capability is available in Tableau 8.0.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_EXECUTED_QUERY", description: "Set to 'yes' to prevent Tableau from executing a query as a means of reading metadata. While Tableau typically includes a row-limiting clause in such metadata queries (e.g., 'LIMIT', or 'WHERE 1=0'), this may not help when used with a Custom SQL connection for database systems with poor query optimizers. Note that this capability may prevent Tableau from determining the connection metadata properly. This capability is available in Tableau 7.0.7.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_PREPARED_QUERY", description: "Set to 'yes' to prevent Tableau from using a prepared query as a means of reading metadata. A prepared query is often the fastest way to accurately read metadata. However, not all database systems are capable of reporting metadata for a prepared query without actually executing the query. Note that certain metadata -- for example from connections using Custom SQL-- cannot be retrieved if this capability and CAP_ODBC_METADATA_SUPPRESS_EXECUTED_QUERY are both set. This capability is available in Tableau 7.0.7.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_SELECT_STAR", description: "Set to 'yes' to prevent reading metadata using a 'select *' query. This capability is available in Tableau 8.0.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_SQLCOLUMNS_API", description: "Set to 'yes' to prevent Tableau from using older, less accurate API for reading metadata from ODBC data sources. Setting this capability allows Tableau to read metadata by issuing a full 'select *' query, which is expensive but may enable connectivity for extremely limited or unstable data sources. This capability is available in Tableau 7.0.7.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_SQLFOREIGNKEYS_API", description: "Set to 'yes' to prevent Tableau from attempting to read metadata describing foreign key constraints. Despite the simple nature of this ODBC API, some drivers may have unstable behavior or produce inaccurate results. Setting this capability may force Tableau to generate less efficient queries involving multi-table joins. This capability is available in Tableau 7.0.7.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_SQLPRIMARYKEYS_API", description: "Set to 'yes' to prevent Tableau from reading primary key metadata using the SQPrimaryKeys API or an equivalent query. This capability is available in Tableau 9.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_METADATA_SUPPRESS_SQLSTATISTICS_API", description: "Set to 'yes' to prevent reading unique constraints and table cardinality estimates using the SQLStatistics API or an equivalent query. This capability is available in Tableau 9.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_REBIND_SKIP_UNBIND", description: "Set to 'yes' to force the Tableau native ODBC protocol to rebind a column directly and skip unbinding, which reduces ODBC API calls when resizing buffers to refetch truncated data. T This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
     {customizationName: "CAP_ODBC_SUPPRESS_INFO_SCHEMA_STORED_PROCS", description: "Set to 'yes' to prevent the INFORMATION.SCHEMA schema from being queried when enumerating stored procedures.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_SUPPRESS_PREPARED_QUERY_FOR_ALL_COMMAND_QUERIES", description: "Set to 'yes' to execute all commands directly (i.e., no prepared statement).This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_SUPPRESS_PREPARED_QUERY_FOR_DDL_COMMAND_QUERIES", description: "Set to 'yes' to execute DDL commands (e.g. CREATE TABLE) directly (i.e., no prepared statement).This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_SUPPRESS_PREPARED_QUERY_FOR_DML_COMMAND_QUERIES", description: "Set to 'yes' to execute DML commands (e.g. INSERT INTO) directly (i.e, no prepared statement).This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_SUPPRESS_SYS_SCHEMA_STORED_PROCS", description: "Set to 'yes' to explicitly add the 'SYS' schema to the schema exclusions when enumerating stored procedures.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_TRANSACTIONS_COMMIT_INVALIDATES_PREPARED_QUERY", description: "Set to ‘yes’ to indicate that a transaction will invalidate all prepared statements and close any open cursors. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_TRANSACTIONS_SUPPRESS_AUTO_COMMIT", description: "Set to 'yes' to prevent the Native ODBC Protocol from using default auto-committing transaction behavior in ODBC. This capability cannot be used with CAP_ODBC_TRANSACTIONS_SUPPRESS_EXPLICIT_COMMIT. This capability is available in 8.1. and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_TRANSACTIONS_SUPPRESS_EXPLICIT_COMMIT", description: "Set to 'yes' to prevent the Native ODBC Protocol from explicitly managing transactions. This capability cannot be used with CAP_ODBC_TRANSACTIONS_SUPPRESS_AUTO_COMMIT. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_TRIM_VARCHAR_PADDING", description: "Set to 'yes' to force the Tableau native ODBC protocol to trim trailing whitespace from VARCHAR columns which the driver has erroneously padded. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_UNBIND_AUTO", description: "Set to 'yes' to force the Tableau native ODBC protocol to unbind and deallocate columns automatically, which can reduce ODBC API calls. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_UNBIND_BATCH", description: "Set to 'yes' to force the Tableau native ODBC protocol to unbind and deallocate columns in a single batch operation, which can reduce ODBC API calls. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_UNBIND_EACH", description: "Set to 'yes' to force the Tableau native ODBC protocol to unbind and deallocate columns individually, which may improve stability. This is the default behavior for unbinding columns. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_UNBIND_PARAMETERS_BATCH", description: "Set to ‘yes’ to unbind all parameters in a single batch operation. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_ODBC_USE_NATIVE_PROTOCOL", description: "Set to 'yes' to force Tableau to use its native ODBC protocol instead of the OLE DB bridge to ODBC. This must be enabled to use any other CAP_ODBC_* capabilities. This capability is available in Tableau 6.1.4 through Tableau 8.0 only.", customizationValue: "yes"},
       {customizationName: "CAP_ORACLE_SHOW_ALL_SYNONYM_OWNERS", description: "Set to 'yes' to list all the owners in the all_synonyms view for Oracle. This capability is available in 9.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_BOOLEXPR_TO_INTEXPR", description: "Set to 'yes' if Tableau must coerce any boolean expressions to an integer value in order include in a result set.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_FROM_REQUIRES_ALIAS", description: "Set to 'yes' if the FROM clause must provide an alias for the given table. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_GROUP_ALLOW_DUPLICATES", description: "Set to 'no' if SQL queries cannot contain duplicate expressions in the GROUP BY clause (this is uncommon). This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_GROUP_BY_ALIAS", description: "Set to 'yes' if SQL queries with aggregations can reference the grouping columns by their corresponding alias in the SELECT list, e.g. GROUP BY 'none_ShipCountry_nk'.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_GROUP_BY_DEGREE", description: "Set to 'yes' if SQL queries with aggregations can reference the grouping columns by the ordinal position of each column, e.g. GROUP BY 2, 5. See also: CAP_QUERY_SORT_BY_DEGREE", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_HAVING_REQUIRES_GROUP_BY", description: "Set to 'yes' if Tableau must use an artificial grouping field for any query which has a HAVING clause but no grouping columns. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_HAVING_UNSUPPORTED", description: "Set to 'yes' if the SQL syntax for HAVING is unsupported. Tableau may be able to work around this using subqueries. See also: CAP_QUERY_SUBQUERIES. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_INCLUDE_GROUP_BY_COLUMNS_IN_SELECT", description: "Set to 'yes' to require all GROUP BY expressions to also appear in the SELECT expression list. This capability is available in Tableau 8.0.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_JOIN_ACROSS_SCHEMAS", description: "Set to 'yes' if SQL queries can express joins between tables located in different schemas.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_JOIN_ASSUME_CONSTRAINED", description: "Set to ‘yes’ to cull inner joins even if the database tables does do not have FK-PK relationships. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_JOIN_PUSH_DOWN_CONDITION_EXPRESSIONS", description: "Set to 'yes' to rewrite joins to simplify the ON clause conditions to simple identifier comparisons. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_JOIN_REQUIRES_SCOPE", description: "Set to 'yes' if SQL queries must scope each join clause within parentheses to ensure a proper order of evaluation.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_JOIN_REQUIRES_SUBQUERY", description: "Set to ‘yes’ to force join expressions involving more than two tables to be composed with subqueries. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_NULL_REQUIRES_CAST", description: "Set to 'yes' if the data source requires that all NULL literals are cast to an explicit data type. This capability is available in Tableau 6.0.6.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SELECT_ALIASES_SORTED", description: "Set to 'yes' if Tableau must impose a deterministic order on the SELECT expressions (sorted by alias) to ensure that query results can be properly matched with each field in the Tableau visualization. This is only required for data sources which do not preserve the aliases of the SELECT expressions when returning metadata with the query results. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SORT_BY_DEGREE", description: "Set to 'yes' if SQL queries can reference the sorting columns by the ordinal position of each column, e.g. ORDER BY 2, 5. See also: CAP_QUERY_GROUP_BY_DEGREE. This capability is available in Tableau 6.0.6.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SUBQUERIES", description: "Set to 'yes' if the data source supports subqueries.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SUBQUERIES_WITH_TOP", description: "Set to 'yes' if the data source supports a TOP or LIMIT row-limiting clause within a subquery.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SUBQUERY_DATASOURCE_CONTEXT", description: "Set to 'yes' to use subquery filtered query context to implement data source filters. This capability is available in Tableau 8.0 and later.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_SUBQUERY_QUERY_CONTEXT", description: "Set to 'yes' to force Tableau to use a subquery for context filters instead of a temporary table or locally cached results. This capability is available in Tableau 6.1.4.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_TOP_N", description: "Set to 'yes' if the data source supports any form of row-limiting clause. The exact forms supported are described below.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_TOPSTYLE_LIMIT", description: "Set to 'yes' if the data source uses LIMIT as the row-limiting clause.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_TOPSTYLE_ROWNUM", description: "Set to 'yes' if the data source supports an Oracle-style filter on ROWNUM as the row-limiting clause.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_TOPSTYLE_TOP", description: "Set to 'yes' if the data source uses TOP as the row-limiting clause.", customizationValue: "yes"},
       {customizationName: "CAP_QUERY_USE_QUERY_FUSION", description: "Set to ‘no’ to prevent Tableau from combining multiple individual queries into a single combined query. Turn off this capability for performance tuning or if the database is unable to process large queries. This capability is enabled by default and is available in Tableau 9.0 and later for all data sources except Tableau data extracts. Support for this capability in Tableau data extracts is available in Tableau 9.0.6.", customizationValue: "yes"},
     {customizationName: "CAP_SELECT_INTO", description: "Set to 'yes' if Tableau can create a table on the fly from the resultset of another query. See also: CAP_CREATE_TEMP_TABLES.", customizationValue: "yes"},
     {customizationName: "CAP_SELECT_TOP_INTO", description: "Set to 'yes' if Tableau can use a TOP or LIMIT row-limiting clause when creating a table from a query resultset.", customizationValue: "yes"},
     {customizationName: "CAP_SKIP_CONNECT_VALIDATION", description: "Set to 'yes' to prevent Tableau from validating the structure of a user-defined multi-table join or Custom SQL connection. This capability is available through Tableau 7.0 only.", customizationValue: "yes"},
     {customizationName: "CAP_STORED_PROCEDURE_PREFER_TEMP_TABLE", description: "Set to 'yes' to use a temporary table to support remote queries over the stored procedure result set.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_STORED_PROCEDURE_REPAIR_TEMP_TABLE_STRINGS", description: "Set to 'yes' to attempt to compute actual string widths if metadata indicates no width or non-positive width. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_STORED_PROCEDURE_TEMP_TABLE_FROM_BUFFER", description: "Set to 'yes' to populate the temporary table from a result set buffered in entirety.This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
       {customizationName: "CAP_STORED_PROCEDURE_TEMP_TABLE_FROM_NEW_PROTOCOL", description: "Set to ‘yes’ to populate the temporary table from a separate protocol created for just this operation. This capability is available in Tableau 8.1 and later.", customizationValue: "yes"},
     {customizationName: "CAP_SUPPRESS_DISCOVERY_QUERIES", description: "Set to 'yes' to prevent Tableau from detecting the supported SQL syntax for a variety of clauses.", customizationValue: "yes"},
       {customizationName: "CAP_SUPPRESS_DISPLAY_LIMITATIONS", description: "Set to 'yes' to suppress displaying any warnings about limitations for this data source.", customizationValue: "yes"},
       {customizationName: "SQL_ODBC_INTERFACE_CONFORMANCE", description: "Currently unused.", customizationValue: 0},
       {customizationName: "SQL_SQL_CONFORMANCE", description: "Integer bitmask. Defines the level which the data source conforms to the SQL standard: '1' for entry-level SQL-92 conformance, '2' for FIPS 127-2 transitional, '4' for Intermediate and '8' for Full conformance.", customizationValue: 0},
       {customizationName: "SQL_CATALOG_USAGE", description: "Integer bitmask. Defines the SQL statements in which a catalog identifier can be used.", customizationValue: 0},
       {customizationName: "SQL_SCHEMA_USAGE", description: "Integer bitmask. Defines the SQL statements in which a schema identifier can be used.", customizationValue: 0},
       {customizationName: "SQL_AGGREGATE_FUNCTIONS", description: "Integer bitmask. Defines which standard SQL aggregation forms are supported.", customizationValue: 0},
       {customizationName: "SQL_NUMERIC_FUNCTIONS", description: "Integer bitmask. Defines which SQL scalar numeric functions are supported.", customizationValue: 0},
       {customizationName: "SQL_STRING_FUNCTIONS", description: "Integer bitmask. Defines which SQL scalar string functions are supported.", customizationValue: 0},
       {customizationName: "SQL_TIMEDATE_FUNCTIONS", description: "Integer bitmask. Defines which SQL scalar date / time functions are supported.", customizationValue: 0},
       {customizationName: "SQL_TIMEDATE_ADD_INTERVALS", description: "Integer bitmask. Defines which date / time intervals are supported with the TIMESTAMPADD scalar function.", customizationValue: 0},
       {customizationName: "SQL_TIMEDATE_DIFF_INTERVALS", description: "Integer bitmask. Defines which date / time intervals are supported with the TIMESTAMPDIFF scalar function.", customizationValue: 0},
       {customizationName: "SQL_DATETIME_LITERALS", description: "Integer bitmask. Defines which SQL-92 literals are supported for representing DATE / TIME constants and INTERVALs.", customizationValue: 0},
       {customizationName: "SQL_SYSTEM_FUNCTIONS", description: "Integer bitmask. Defines support for special SQL system scalar functions: IFNULL, DBNAME and USERNAME.", customizationValue: 0},
       {customizationName: "SQL_SQL92_VALUE_EXPRESSIONS", description: "Integer bitmask. Defines which logical functions are supported for testing and manipulating values: CASE, CAST and NULLIF.", customizationValue: 0},
       {customizationName: "SQL_SQL92_NUMERIC_VALUE_FUNCTIONS", description: "Integer bitmask. Defines which functions can produce a numeric value from non-numeric data, including: EXTRACT (for date / time part extraction), CHAR_LENGTH, CHARACTER_LENGTH and POSITION(.. IN ..).", customizationValue: 0},
       {customizationName: "SQL_SQL92_STRING_FUNCTIONS", description: "Integer bitmask. Defines which string manipulation functions are supported.", customizationValue: 0},
       {customizationName: "SQL_SQL92_DATETIME_FUNCTIONS", description: "Integer bitmask. Defines which date / time manipulation functions are supported for determining the current date, time or timestamp.", customizationValue: 0},
       {customizationName: "SQL_OJ_CAPABILITIES", description: "Integer bitmask. Defines which type of outer joins are supported.", customizationValue: 0},
       {customizationName: "SQL_SQL92_RELATIONAL_JOIN_OPERATORS", description: "Integer bitmask. Defines which types of JOIN operators are supported, e.g. INNER, OUTER.", customizationValue: 0},
       {customizationName: "SQL_SQL92_PREDICATES", description: "Integer bitmask. Defines which predicates are supported for logical tests of values, e.g. IS NULL, LIKE, IN.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_FUNCTIONS", description: "Integer bitmask. Defines which ODBC scalar functions are supported for CASTing or CONVERTing one data type to another.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_TINYINT", description: "Integer bitmask. Determines which other data types that this named type can be converted to using the ODBC scalar function CONVERT.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_SMALLINT", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_INTEGER", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_BIGINT", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_REAL", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_FLOAT", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_DOUBLE", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_CHAR", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_VARCHAR", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_LONGVARCHAR", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_DECIMAL", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_NUMERIC", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_BIT", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_GUID", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_BINARY", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_VARBINARY", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_LONGVARBINARY", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_DATE", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_TIME", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_TIMESTAMP", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CONVERT_INTERVAL_DAY_TIME", description: "Integer bitmask. Same as above.", customizationValue: 0},
       {customizationName: "SQL_CURSOR_COMMIT_BEHAVIOR", description: "Short integer value. “0” if the prepared statements are closed upon commit for the data source.", customizationValue: 0},
       {customizationName: "SQL_MAX_IDENTIFIER_LEN", description: "Integer value. Defines the maximum number of characters that can be used in an identifier. Tableau leaves room for one extra character as the string terminator.", customizationValue: 0},
       {customizationName: "SQL_TXN_CAPABLE", description: "Short integer value. “0” if the data source does not support the transaction.", customizationValue: 0},
       {customizationName: "SQL_COLUMN_ALIAS", description: "Boolean value. 'Y' if the data source supports using aliases for columns listed in the SELECT clause.", customizationValue: "Y"},
       {customizationName: "SQL_IDENTIFIER_QUOTE_CHAR", description: "String value. Indicates the character which can be used for quoting identifiers. Because the connection customization is an XML document, any entities must properly be encoded. For example, double-quotes will be '&quot;'. Additionally this character is assumed to work as the opening and closing character around identifiers, so some data sources which require '[]' to enclose identifiers will not be supported.", customizationValue: ""},
       {customizationName: "SQL_CATALOG_NAME_SEPARATOR", description: "Character value. Indicates the separator character to use between identifiers when qualifying them with a catalog, schema or table name. This is typically the period character.", customizationValue: ""},
       {customizationName: "SQL_SPECIAL_CHARACTERS", description: "String value. Indicates the special characters which are allowed in identifier strings.", customizationValue: ""},
       {customizationName: "SQL_CATALOG_TERM", description: "String value. This is the descriptive term for a database catalog, which appears in the Tableau connection dialog for this ODBC data source.", customizationValue: ""},
       {customizationName: "SQL_SCHEMA_TERM", description: "String value. This is the descriptive term for a database schema, which appears in the Tableau connection dialog for this ODBC data source.", customizationValue: ""},
       {customizationName: "SQL_TABLE_TERM", description: "String value. This is the descriptive term for a database table, which appears in the Tableau connection dialog for this ODBC data source.", customizationValue: ""},
       {customizationName: "SQL_DRIVER_NAME", description: "String value. This is the name of the database ODBC driver.", customizationValue: ""},
       {customizationName: "SQL_DRIVER_VER", description: "String value. This is the version number of the ODBC driver.", customizationValue: ""},
       {customizationName: "SQL_DRIVER_ODBC_VER", description: "String value. This is the version of the ODBC API which the driver supports.", customizationValue: ""},
       {customizationName: "SQL_ODBC_VER", description: "String value. This is the version of ODBC which the Windows ODBC Driver Manager supports. This should not need to be customized.", customizationValue: ""},
       {customizationName: "SQL_DBMS_NAME", description: "String value. This is the name of the database vendor.", customizationValue: ""},
       {customizationName: "SQL_DBMS_VER", description: "String value. This is the version of the database system.", customizationValue: "name"},
       {customizationName: "SQL_SERVER_NAME", description: "String value. This is the named network address of the database server.", customizationValue: "name"},
       {customizationName: "SQL_USER_NAME", description: "String value. This is the name of the currently authenticated user.", customizationValue: "name"}
      ];

